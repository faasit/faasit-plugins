# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import comm_pb2 as comm__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in comm_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NodeCommunicationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteCheckpoint = channel.unary_unary(
                '/NodeCommunication/ExecuteCheckpoint',
                request_serializer=comm__pb2.CliCheckpointRequest.SerializeToString,
                response_deserializer=comm__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.ExecuteRestore = channel.unary_unary(
                '/NodeCommunication/ExecuteRestore',
                request_serializer=comm__pb2.CliRestoreRequest.SerializeToString,
                response_deserializer=comm__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.ExecutePrepare = channel.unary_unary(
                '/NodeCommunication/ExecutePrepare',
                request_serializer=comm__pb2.CliPrepareEnvRequest.SerializeToString,
                response_deserializer=comm__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.ExecuteUploadFile = channel.unary_unary(
                '/NodeCommunication/ExecuteUploadFile',
                request_serializer=comm__pb2.CliUploadFileRequest.SerializeToString,
                response_deserializer=comm__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.ExecuteStartContainer = channel.unary_unary(
                '/NodeCommunication/ExecuteStartContainer',
                request_serializer=comm__pb2.CliStartContainerRequest.SerializeToString,
                response_deserializer=comm__pb2.CommandResponse.FromString,
                _registered_method=True)


class NodeCommunicationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteCheckpoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteRestore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecutePrepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteUploadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteStartContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeCommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteCheckpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCheckpoint,
                    request_deserializer=comm__pb2.CliCheckpointRequest.FromString,
                    response_serializer=comm__pb2.CommandResponse.SerializeToString,
            ),
            'ExecuteRestore': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteRestore,
                    request_deserializer=comm__pb2.CliRestoreRequest.FromString,
                    response_serializer=comm__pb2.CommandResponse.SerializeToString,
            ),
            'ExecutePrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecutePrepare,
                    request_deserializer=comm__pb2.CliPrepareEnvRequest.FromString,
                    response_serializer=comm__pb2.CommandResponse.SerializeToString,
            ),
            'ExecuteUploadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteUploadFile,
                    request_deserializer=comm__pb2.CliUploadFileRequest.FromString,
                    response_serializer=comm__pb2.CommandResponse.SerializeToString,
            ),
            'ExecuteStartContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteStartContainer,
                    request_deserializer=comm__pb2.CliStartContainerRequest.FromString,
                    response_serializer=comm__pb2.CommandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NodeCommunication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('NodeCommunication', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeCommunication(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteCheckpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NodeCommunication/ExecuteCheckpoint',
            comm__pb2.CliCheckpointRequest.SerializeToString,
            comm__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteRestore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NodeCommunication/ExecuteRestore',
            comm__pb2.CliRestoreRequest.SerializeToString,
            comm__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecutePrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NodeCommunication/ExecutePrepare',
            comm__pb2.CliPrepareEnvRequest.SerializeToString,
            comm__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteUploadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NodeCommunication/ExecuteUploadFile',
            comm__pb2.CliUploadFileRequest.SerializeToString,
            comm__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteStartContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NodeCommunication/ExecuteStartContainer',
            comm__pb2.CliStartContainerRequest.SerializeToString,
            comm__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
